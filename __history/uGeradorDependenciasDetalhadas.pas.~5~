                                                                   unit uGeradorDependenciasDetalhadas;

interface

uses
  System.SysUtils,
  System.Classes,
  System.IOUtils,
  System.RegularExpressions,
  System.Generics.Collections,
  uRelatorioHTML;

type
  TGeradorDependencias = class
  public
    class function Gerar(const PastaFontes: string): TList<TDependenciaInfo>;
  end;

implementation

function GerarSugestao(const Tipo: string): string;
begin
  if Tipo.StartsWith('TDAO') then
    Exit('Substituir por interface (ex: IDAO)');
  if Tipo.StartsWith('TService') then
    Exit('Extrair dependência para camada intermediária');
  if Tipo.Contains('Controller') then
    Exit('Avaliar inversão de dependência');
  Result := 'Avaliar uso de interface ou injeção de dependência';
end;

class function TGeradorDependencias.Gerar(const PastaFontes: string): TList<TDependenciaInfo>;
var
  arquivos: TStringDynArray;
  arquivo, linha, classeAtual, unitAtual: string;
  LReader: TStreamReader;
  iLinha: Integer;
  info: TDependenciaInfo;
  match: TMatch;
begin
  Result := TList<TDependenciaInfo>.Create;
  arquivos := TDirectory.GetFiles(PastaFontes, '*.pas', TSearchOption.soAllDirectories);

  for arquivo in arquivos do
  begin
    unitAtual := TPath.GetFileName(arquivo);
    iLinha := 0;
    classeAtual := '';

    try
      LReader := TStreamReader.Create(arquivo, nil, True);
    except
      on E: Exception do
      begin
        Writeln('⚠️ Erro ao ler "', arquivo, '": ', E.Message);
        Continue;
      end;
    end;

    try
      while not LReader.EndOfStream do
      begin
        Inc(iLinha);
        linha := LReader.ReadLine.Trim;

        // Detecta definição de classe
        match := TRegEx.Match(linha, 'type\s+(T\w+)\s*=\s*class', [roIgnoreCase]);
        if match.Success then
        begin
          classeAtual := match.Groups[1].Value;
          Continue;
        end;

        // Detecta propriedades com tipos concretos
        match := TRegEx.Match(linha, '(\w+):\s*(T\w+);', [roIgnoreCase]);
        if match.Success and (classeAtual <> '') then
        begin
          info.UnitName := unitAtual;
          info.Linha := iLinha;
          info.Classe := classeAtual;
          info.DependeDe := match.Groups[2].Value;
          info.Sugestao := GerarSugestao(info.DependeDe);
          Result.Add(info);
        end;
      end;
    finally
      LReader.Free;
    end;
  end;
end;

end.
